Changelog for VigilantBSP

v0.91 (in development)
- New feature: allow user to enable blockmap subset compression variants conditionally by placing a question mark after respective options.
- Change: among working blockmaps with EQUAL sizes, when dummy linedef is enabled yet allowed to be non-zero (default), prefer blockmap with zero dummy linedef unless its too long.
	This can decrease load times in Gzdoom by preventing it from discarding a working BLOCKMAP.
- New feature: --roots=N parameter, where N is a positive number, to run plain multi-tree only for N best roots. See "Debug and other hidden parameters".
- Enhancement: minor speed improvements when building reject for large maps where rejectSYMM optimization can be used (on by default, disabled by certain RMB effects)
- Enhancement: plain multi-tree now explicitly favors trees that can be represented in vanilla format, when targeting "vanilla" or "prefer vanilla" node formats.
	For default "Vanilla format which all software ports recognise" setting, it will also favor a tree under signed limits of original game over any trees that require unsigned limits.
- Enhancement: new selectable option for "nodes format compatibility": "Vanilla, but multi-tree is comfortable with unsigned trees"
	Turns off a subset of previous enhancement. When not using multi-tree, is fully identical to "v" (default).
- Bug fix: now can build vanilla trees in multi-tree when selecting node format "Prefer vanilla, switch to Zdoom (extended, compressed) nodes on overflow".
- Added --ableist parameter that restores behavior of previous version for multi-tree of just selecting the best tree, even if it won't fit vanilla and vanilla trees exist.
	See "Debug and other hidden parameters"
- This release is no longer marked "alpha" -- VigilantBSP has been de facto stable for a while.

v0.86a
- New feature: allow user to set zlib compression level for compressed Zdoom nodes compatibility format, e.g. via -nc=z9 instead of -nc=z.
	VigilantBSP defaults to vanilla nodes compatibility format, Zdoom compressed target is a non-default setting that this feature enhances.
- New feature: two selectable options for "nodes format compatibility" -> "Prefer vanilla, switch to Zdoom (extended, compressed) nodes on overflow"
	User will see messages displayed in console from both vanilla and Zdoom node builders, because they are run in parallel by default.
	This messages' interleaving doesn't affect output file stability. See vigilantbsp.txt for details.
- Speed improvements to visplane partitioners (only noticeable on large maps).
- Added --eject parameter, useful for copying only levels to output wad and omitting all other lumps. See "Debug and other hidden parameters"
- Bug fix: refuse to overwrite the output file if it is explicitly specified (via -o) to be the same as input file.
	Previously, at least on Linux systems it was possible to corrupt input file by specifying it as output as well.
	The capacity to rewrite file (by creating a temporary file, this is done when -o is not passed) still remains.
- Minimum Go version to compile VigilantBSP from source is bumped up to v1.19 (from v1.15), which is the last version to support Windows 7.
	I consider VigilantBSP's ability to run on Windows 7 a desirable feature, so the minimum Go version won't be bumped for quite a while.
- (Relevant to programmers) Cgo is disabled in Makefile to guarantee VigilantBSP is statically linked, and not dependent on glibc.
- (Relevant to programmers) Makefile now produces executables for 3rd architecture level, with a misleading "_avx2" suffix. They are untested and will not be packaged with this release.

v0.85a
- New feature: new selectable option for "nodes format compatibility" -> "Prefer vanilla, switch to Deep nodes on overflow"
- When SEGS, SUBSECTORS or NODES are written as the result of rebuilding, format is also shown to the user ("van/lr", "deep", "zdoom ext", "zdoom comp", or "empty")
	SEGS and SUBSECTORS are [empty] for Zdoom extended/compressed format nodes, this is ok as vertices and segs are stored in NODES lump in these formats.
- When multi-tree mode is used for node partitioning, output average time per tree at the end
	This average is merely "full node build time" / "number of trees", so it is usually faster than a single tree build time 
	by a factor equal to number of threads used (provided number of threads <= number of cores)
- Multi-tree for visplane-aware modes are now sped up by using more memory by default, user can opt-out (see "Debug and other hidden parameters", "--speedtree")	
- Improved reject builder performance, with especially major gains for maps with lots of sectors (>10000) in absence of RMB effects that break reject table symmetry
- If reject table is known to be symmetric in advance, building reject will consume less memory than before 
	When RMB options file is not present, reject table is guaranteed to be symmetric.
	RMB options that are assumed to break symmetry are: BLIND, SAFE, INCLUDE, EXCLUDE, LEFT, RIGHT, ONE (the last three are not yet implemented, but are read nonetheless 
		and will block this optimization). Parameters to these options are not checked, only the presence of options.
	Combination of GROUP with some RMB options (for example, DISTANCE or LINE) can also prevent this optimization from taking effect, even if the produced reject is symmetric.
- RMB enhancement: less memory used to process options that specify "length in sector units" 
- As a consequence of previous two changes, you might succeed in building reject on 32-bit system in some cases where previous versions would fail
	It still depends on whether you will have enough memory available (process being limited to 2Gb on 32-bit systems)
- RMB change: LINE effect can no longer be overridden by other options, including not yet implemented RIGHT and LEFT specified on the same linedef
- RMB change: specifying both LEFT and RIGHT on the same linedef results in the same effect as applying LINE to that linedef
	Outside of this combination, LEFT and RIGHT take no effect as they are not yet implemented
	Even under this combination, the assumption that reject table is going to be symmetric will NOT be made, and respective optimizations won't take place
- (Relevant to programmers) Yet another "source code" file is now generated, and like last time it is also for reject builder! (rejectSYMM.go)

v0.82a
- New feature: added new partition algorithm - "Zennode/Zokumbsp-like (tree balance and depth)"  
    See also "Debug and other hidden parameters", "--zenvar" on how to set numeric parameters used in formula
    Not affected by -nf=<number> (factor parameter)
    Affected by "priority for partition selection"
- New feature: added "balanced tree" variant to "Priority for partition selection" option
    When advanced visplane reduction is combined with this option, numeric parameters from "--zenvar" also have effect
    (in addition to factor from -nf=<number>)
- Added an "inverse modifier" (compare "-!m:<level_list>" with "-m:<level_list>") to option to build specific levels: see documentation on "-m: Rebuild only specific maps"
- Better RMB support: implemented GROUP and LINE options!
	In VigilantBSP, you can apply LINE to a line that is part of border of self-referencing sector, it will function just as good as putting it on
	a normal 2-sided line separating two normal sectors.
- RMB bugfix: true to original RMB program, INCLUDE is now able to make sectors visible if they were hidden as the result of DISTANCE effect 
	If sector is effected both by INCLUDE (making it visible) and by DISTANCE (making it hidden), the sector will be visible - the intended behavior.
- RMB change: INCLUDE will force visibility in all cases except when overridden by EXCLUDE
	Related to the bug above. Zennode introduced artificial limitation to INCLUDE (in an effort to protect user from themselves I guess?), which
	previous versions of VigilantBSP used to copy, but now this limitation is done away with.
- RMB bugfix: VigilantBSP now can recognize comma-delimited lists (inside brackets) just like the original RMB program
	RMB manual prescribes that lists be space-delimited (with/without brackets), and does not suggest comma-delimited ones are valid syntax
	But defacto RMB program accepts comma-delimited lists as well, and they are used in _some_ of examples shipped with it (RMBDEMO2.rej, RMBDEMO3.rej) 
- RMB change: all RMB-related error messages should now contain RMB file name and line number 
- RMB change: tell user about RMB file that was loaded
- RMB change: report file (*.rpt, generated by REPORT option) will match line break style (CRLF or LF) used in RMB options file 
- RMB enhancement: BLIND 0/1 and SAFE 0/1 options will no longer force pedantic mode of self-referencing sector visibility assessment
- Added hidden option documented under "Debug and other hidden parameters", "--sidecache"
- When multi-tree mode and verbose output are used together, verbose output of nodebuilding process will only be shown after all trees are built, and only the output pertaining to the chosen tree	
- Added "Splits reused already created vertices to avoid duplicates: N times" to the output when nodes are built (the feature itself to avoid duplicates was added in previous version)
	This allows to see if and when this feature (introduced in v0.78a) took effect. It is good regardless of whether N happens to be zero or otherwise, as it detect 100% cases
	This tally doesn't include duplicates that could have been created from splitting both segs of 2-sided linedef with the same partition line.
- Under verbosity level equal to or greater than 1, output "convex" nodes with multiple sectors during nodebuilding process
	Zennode and ZokumBSP nodebuilders do separate partitioning strategy for this case, I am evaluating whether it is worth to copy that functionality for Zennode-like partitioner, maybe others too.
	Note that these nodes usually do not form closed polygons, and in case of having many segs, all of them may lie on the same line
- Documentation: corrected typos in "Debug and other hidden parameters", --detailnodes
- (Relevant to programmers) Yet another "source code" file is now generated: rejectFAST.go, do not edit manually! And don't forget to run "go generate" after updating reject builder code

v0.78a
- Fixed bug: Zdoom extended/compressed nodebuilding now uses the correct precision, map02 of watrsp.wad now builds correctly
- Fixed bug: detailed levels that had problems now shall be built correctly with vanilla and DeeP nodes as well (same map as an example as previous)
    This leads to a change in the way some maps are built, and might result in increased segs and visplanes (but VigilantBSP tries
    to avoid using that on vanilla maps). See "Debug and other hidden parameters", --detailnodes if you are interested in
    more information/control over this.
- Nodebuilder no longer adds vertices that are duplicate of existing ones (although these occurences were seldom before), this will result in smaller VERTEXES lump 
- Redone bug fix for broken polyobject in Guardian of Steel and the like so that fewer segs and visplanes are generated for maps with polyobjects
- Improved heuristics in advanced visplane reduction partitioner (more accurate measure of partition length without the parts that lie in the void).
- When blockmap builder is allowed to select a dummy linedef different from zero, it will prefer linedefs that are shorter than 2048 units.
- Failure to write report file when requested by REPORT option in RMB options file is no longer regarded as fatal.
- Decreased memory use when building reject
- Nodebuilder is now able to represent in NODES lump partition lines derived from very long linedefs without overflows most of the time

v0.75a
- New feature: option to generate nodes in Zdoom non-GL extended and compressed formats
    Known bug: a section near the end of map02 of watrsp.wad (Water Spirit by Manbou) is built incorrectly IF specific combination of options is used (advanced visplane reduction + output is extended or compressed nodes format). Specifically, invisible stairs are erroneously created towards the end of map02, posing an impassable blockade. I'm currently investigating the issue.
- New feature: an option to remove non-collideable lines from blockmap, disabled by default. Takes care not to destroy self-referencing sector effects, but still needs a lot of testing from users targeting non-Doom games or advanced engines
- Fixed bug: Guardian of Steel, map05 of Hexen, had broken polyobject when rebuilt using default partitioner 
- Sped up multi-tree just a bit 
- The initial order of segs (before splits) will now correspond to order of linedefs even when using "cull invisible linedefs" option
- In vanilla nodes format, when number of segs grows large, segs corresponding to subsector with greatest amount of segs will be moved to the end of seg list to prevent overflow in vanilla/unsigned ports provided this is possible
- Added hidden option to produce unreversed BSP nodes array, which might (or might not) offer performance benefits on old (486?) processors. See "Debug and other hidden parameters", "--unreversenodes".
- Improvement: specifying an endgoal for blockmap in deterministic mode no longer cancels multi-threading
- Minor change: removed "(limited recognition)" notice next to Deep nodes format option as it can be read ambiguously. 

v0.74a
- New feature: partial RMB support!
- New feature: multi-tree! For now, it is simplest form of multi-tree (finding best BSP tree out of several) - where only root node is bruteforced among all possible choices. Credit: jerko for suggesting this.
- Fixed severe bug in reject builder that sometimes prevented monsters from sighting the player
- Stricter ordering of log output - output pertaining to the previous map is displayed strictly before one pertaining to next map
- (Relevant to programmers) Can now build VigilantBSP on Go 1.15+ (was 1.17+). This is so you can build it on current Debian stable (bullseye) using Debian repository's version of Go
- (Relevant to programmers) Refactored code for my future plans to implement Zdoom non-GL extended / compressed nodes generation support
- Documentation: rewrited note about linedef specials that affect angle with more up-to-date knowledge on ports support and interaction with wall wiggle fix. Still could be improved, though.

v0.72a
- Fixed bug: some sectors wrongly considered compatible with each other and sector 0 in "advanced visplane reduction" algorithm 
- Fixed bug: unlike what is written in documentation, specifying positive diagonal penalty didn't force enable it to all levels, now it does
- Forced 64-bit math on 32-bit computers in critical areas of seg splitting code
- Secondary score option changed to priority: split minimization or depth reduction. Some maps benefit from the former, other maps - from the latter.
- Sped-up 32-bit Windows executable by making bsp tree builder codebase use fixed-point math for superblocks. This shouldn't introduce any errors 
- Fixed bug that prevented VigilantBSP from recognising Doom 1 and Heretic levels (ExMy)
- New option to build only specific levels rather than all levels

v0.69a
- Reformatted changelog
- Added option named: "Use secondary score for partition selection"
- Fixed bug: dummy linedefs created by nodebuilder to implement fast/remote scrolling shall not be added to blockmap and bsp tree
- Introduced debug parameters intended for programmers and people who otherwise know programming and can analyze source code
- Fixed bug: panic in blockmap builder due to linedef with max index was missing from bounds computation
- Fixed bug: panic in reject builder due to out-of-bounds access to array of solid (1-sided) lines in certain circumstances

v0.67a 
- Initial alpha build


